/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 model.gltf
*/
import React, { useLayoutEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useThree } from "react-three-fiber";
import { animated, useSprings } from "@react-spring/three";
import * as THREE from "three";

export function Model(props) {
  const { nodes, materials } = useGLTF("/model.gltf");
  let camera = useThree((state) => state.camera);
  let scene = useThree((state) => state.scene);

  const sceneObjects = [
    {
      bottom: nodes.BOX_Bottom0,
      detail: nodes.BOX_Detail0,
      handle: nodes.BOX_Handle_0,
      top: nodes.BOX_Top0,
    },
    {
      bottom: nodes.BOX_Bottom1,
      detail: nodes.BOX_Detail1,
      handle: nodes.BOX_Handle_1,
      top: nodes.BOX_Top1,
    },
    {
      bottom: nodes.BOX_Bottom2,
      detail: nodes.BOX_Detail2,
      handle: nodes.BOX_Handle_2,
      top: nodes.BOX_Top2,
    },
    {
      bottom: nodes.BOX_Bottom3,
      detail: nodes.BOX_Detail3,
      handle: nodes.BOX_Handle_3,
      top: nodes.BOX_Top3,
    },
    {
      bottom: nodes.BOX_Bottom4,
      detail: nodes.BOX_Detail4,
      handle: nodes.BOX_Handle_4,
      top: nodes.BOX_Top4,
    },
    {
      bottom: nodes.BOX_Bottom5,
      detail: nodes.BOX_Detail5,
      handle: nodes.BOX_Handle_5,
      top: nodes.BOX_Top5,
    },
    {
      bottom: nodes.BOX_Bottom6,
      detail: nodes.BOX_Detail6,
      handle: nodes.BOX_Handle_6,
      top: nodes.BOX_Top6,
    },
    {
      bottom: nodes.BOX_Bottom7,
      detail: nodes.BOX_Detail7,
      handle: nodes.BOX_Handle_7,
      top: nodes.BOX_Top7,
    },
  ];

  const textureMap = materials.Bottom_transp.map;
  const transparentMaterial = new THREE.MeshPhysicalMaterial({
    roughness: 10,
    clearcoat: 10,
    transmission: 0.6,
    ior: 1,
    side: THREE.DoubleSide,
    map: textureMap,
  });
  const plasticMaterial = new THREE.MeshStandardMaterial({
    color: "rgb(207, 178, 76)",
    roughness: 0.3,
    metalness: 0.8,
  });

  useLayoutEffect(() => {
    camera.position.set(0, 15, 30);
    camera.rotation.set(0, 0, Math.PI / 4);
    scene.position.set(0, 0, 0);
    let fov = camera.fov;
    camera.rotation.set(-0.2, 0, 0);
    fov = (2400 * 18) / window.innerWidth;
    camera.fov = fov;
    camera.updateProjectionMatrix();
  });

  const [open, setOpen] = useState([
    { id: 0, isOpen: false },
    { id: 1, isOpen: false },
    { id: 2, isOpen: false },
    { id: 3, isOpen: false },
    { id: 4, isOpen: false },
    { id: 5, isOpen: false },
    { id: 6, isOpen: false },
  ]);

  const boxCkickHandler = (e, index) => {
    const state = [...open];
    state[index].isOpen = !state[index].isOpen;
    console.log(state);
    setOpen(state);
  };
  //animations
  const [springs] = useSprings(
    7,
    (index) => ({
      position: open[index]?.isOpen ? [0, 0, 0] : [0, 20, -290],
      rotation: open[index]?.isOpen ? [0, 0, 0] : [-Math.PI / 3, 0, 0],
    }),
    [open]
  );

  return (
    <group {...props} position={[-10, 0.3, 0]} dispose={null}>
      {sceneObjects.map((object, index) => {
        return (
          <group
            castShadow={true}
            onClick={(e) => {
              boxCkickHandler(e, index);
            }}
            key={index}
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <mesh
              castShadow={true}
              geometry={object.bottom?.geometry}
              material={plasticMaterial}
            />
            <animated.group
              castShadow={true}
              position={springs[index]?.position}
              rotation={springs[index]?.rotation}
            >
              <mesh
                castShadow={true}
                geometry={object.detail?.geometry}
                material={materials.Detail}
              />
              <mesh
                castShadow={true}
                geometry={object.handle?.geometry}
                material={materials.Detail}
              />
              <mesh
                castShadow={true}
                geometry={object.top?.geometry}
                material={transparentMaterial}
              />
            </animated.group>
          </group>
        );
      })}
    </group>
  );
}

useGLTF.preload("/model.gltf");
